import { 옵저버_객체 } from './observer';
beforeEach(() => {
    옵저버_객체.함수_셋_초기화();
});
describe('옵저버 객체 테스트', () => {
    describe("'옵저버_함수_등록' 메서드 테스트", () => {
        it('함수를 등록한다.', () => {
            const 함수_배열 = [jest.fn(), jest.fn(), jest.fn()];
            옵저버_객체.함수_등록(함수_배열[0]);
            옵저버_객체.함수_등록(함수_배열[1]);
            옵저버_객체.함수_등록(함수_배열[2]);
            [...옵저버_객체.함수_셋].forEach((함수, 인덱스) => {
                expect(함수).toBe(함수_배열[인덱스]);
            });
        });
    });
    describe("'함수_셋_초기화' 메서드 테스트", () => {
        it('함수_셋을 초기화한다.', () => {
            expect(옵저버_객체.함수_셋.size).toBe(0);
            옵저버_객체.함수_등록(jest.fn());
            옵저버_객체.함수_등록(jest.fn());
            옵저버_객체.함수_등록(jest.fn());
            expect(옵저버_객체.함수_셋.size).toBe(3);
            옵저버_객체.함수_셋_초기화();
            expect(옵저버_객체.함수_셋.size).toBe(0);
        });
    });
    describe("'전역_상태로_변환' 메서드 테스트", () => {
        it('전역 상태로 변환한다.', () => {
            const 상태 = {
                a: 10,
                b: 20
            };
            const 전역_상태 = 옵저버_객체.전역_상태로_변환(상태);
            expect(상태).toEqual(전역_상태);
        });
        it('전역 상태 변경 시 등록된 함수를 호출한다.', () => {
            const 함수_객체 = {
                함수1: jest.fn(),
                함수2: jest.fn(),
                함수3: jest.fn()
            };
            Object.entries(함수_객체).forEach(([, 함수]) => {
                옵저버_객체.함수_등록(함수);
            });
            const 상태 = {
                a: 10,
                b: 20
            };
            const 전역_상태 = 옵저버_객체.전역_상태로_변환(상태);
            const 스파이_배열 = [
                jest.spyOn(함수_객체, '함수1'),
                jest.spyOn(함수_객체, '함수2'),
                jest.spyOn(함수_객체, '함수3')
            ];
            전역_상태.a = 100;
            스파이_배열.forEach((스파이) => {
                expect(스파이).toBeCalledTimes(1);
            });
            전역_상태.b = 200;
            스파이_배열.forEach((스파이) => {
                expect(스파이).toBeCalledTimes(2);
            });
        });
    });
});
